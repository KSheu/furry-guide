Katherine Sheu
304150980
Project 4 Report

1. Description
This implementation utilizes a hash table that is a fixed-size array that stores lists of strings. The insert function takes a string as a parameter, and sorts the letters in the word alphabetically before calling the hash function on the sorted word. This way all permutations of the word would hash to the same place. The lookup function takes a group of letters and sorts them before calling the hash function to determine which bucket would potentially hold anagrams. The sorted group of letters is compared to the each sorted string in the list at that bucket. This is necessary due to possible collisions of other groups of letters hashing to the same bucket. If they match, the original, non-sorted string in the list is displayed. 

2. Pseudocode
hashword(word)
	seed the hash
	for every char in the word
		perform an operation and add to the hash
	return hash mod table_size

sortword(word)
	insertion sort
		

insert(word)
	remove or change unwanted characters
	if valid word
		get the hash bucket of the sorted word (key)
		push back the original word into the hashtable

lookup(letters, callback)
	if callback is not valid or no letters
		return
	get the hash bucket of the sorted letters (key)
	for each word of the list at that bucket of the hashtable
		if sorted letters matches sorted word 
			print the original word

3. Known Bugs
To my knowledge the program works as intended.